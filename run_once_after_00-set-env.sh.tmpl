#!/bin/bash

# include global vars and functions
source "${INCLUDES}"

{{  if eq .chezmoi.os "linux" -}}
{{      if or (eq .osid "linux-debian") (eq .osid "linux-ubuntu") -}}

# install required APT packages
bdb_command "Installing Linux packages"
sudo apt update && sudo apt install -y $PACKAGES
# install ansible and terraform
UBUNTU_CODENAME=jammy
wget -O- "https://keyserver.ubuntu.com/pks/lookup?fingerprint=on&op=get&search=0x6125E2A8C77F2818FB7BD15B93C4A3FD7BB9C367" | sudo gpg --dearmour -o /usr/share/keyrings/ansible-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/ansible-archive-keyring.gpg] http://ppa.launchpad.net/ansible/ansible/ubuntu $UBUNTU_CODENAME main" | sudo tee /etc/apt/sources.list.d/ansible.list
wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
sudo -- bash -c 'apt update && apt install -y ansible terraform'
bdb_success "installing Linux packages"

{{      else if eq .osid "linux-arch" -}}

# update the system and install required packages
bdb_command "Installing Linux packages"
sudo pacman -Syu --needed --noconfirm $PACKAGES
bdb_success "installing Linux packages"

{{      else if eq .osid "linux-fedora" -}}

# update the system and install required packages
bdb_command "Installing Linux packages"
sudo dnf -y upgrade && sudo dnf -y install $PACKAGES
# install terraform
sudo -- bash -c 'dnf install -y dnf-plugins-core && \
                dnf config-manager --add-repo https://rpm.releases.hashicorp.com/fedora/hashicorp.repo && \
                dnf -y install terraform'
bdb_success "installing Linux packages"

{{      end -}}

# update font cach to load manually installed fonts
bdb_run "Updating font cache"
fc-cache
bdb_outcome "done"

{{  else if eq .osid "darwin" -}}

# install Comman Line Tools if missing
bdb_run "Checking Xcode Command Line Tools"
if  ! type xcode-select &>/dev/null || \
    ! clt_path="$(xcode-select --print-path &>/dev/null)" || \
    ! test -d "${clt_path}" || \
    ! test -x "${clt_path}"; then

    bdb_outcome "missing"
    bdb_command "Installing CLT"
    sudo softwareupdate -i "$(  sudo softwareupdate -l | \
                                grep '*.*Command Line' | \
                                awk -F ":" '{print $2}' | \
                                sed -e 's/^ *//' | \
                                tr -d '\n' \
                            )" --agree-to-license
    bdb_success "installing CLT"
else
    bdb_outcome "installed"
fi

# install Homebrew if missing
bdb_run "Checking Homebrew"
if ! type brew &>/dev/null; then

    # install homebrew
    bdb_outcome "missing"
    bdb_command "Installing Homebrew"
    NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    bdb_success "installing Homebrew"

    # install required packages
    bdb_command "Installing Homebrew formulae"
    brew bundle install --file=".config/homebrew/brewfile"
    bdb_success "installing Homebrew formulae"

else
    bdb_outcome "installed"
fi

{{  else if eq .osid "windows" -}}
{{  end -}}

# load bat colorscheme from ~/.config/bat/themes
bat cache --build

# set zsh as the login shell
bdb_run "Setting ZSH as default shell"
zsh_path="$(which zsh)"
if [[ "${SHELL}" != "${zsh_path}" ]]; then
    echo "${zsh_path}" | sudo tee -a /etc/shells >/dev/null
    sudo chsh -s "${zsh_path}" "${USER}"
fi
bdb_outcome "done"

